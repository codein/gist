diff --git a/api_client.py b/api_client.py
index ce49191..b68c481 100755
--- a/api_client.py
+++ b/api_client.py
@@ -6,20 +6,22 @@ class AnalyticsApiClient():
     A simple client to interact with Analytics API
     """
 
     def analytics_get(self, url, params={}):
         response = requests.get(
             url,
             headers={'Authorization': ANALYTICS_API_TOKEN},
             # timeout=1.5,
             params=params
         )
+        if response.status_code != 200:
+            raise Exception(f'Analytics API error: {response.status_code} {response.text}')
         return response.json()
 
     def get_analytics_recommendation(self, url):
         """
         https://learn.lytics.com/documentation/developer/api-docs/content#content-recommendation
         https://learn.lytics.com/documentation/developer/api-docs/content#generic-content-recommendation
         """
 
         analytics_api_url = 'https://api.lytics.io/api/content/recommend'
         params = {
diff --git a/indexer.py b/indexer.py
index 1852914..0a571c9 100755
--- a/indexer.py
+++ b/indexer.py
@@ -45,15 +45,35 @@ class LunrIndexer:
     def set_lunr_index(self, dir_path):
         self.set_documents(dir_path)
         document_list = list(self.documents.values())
 
         self.idx = lunr(ref='id', fields=('title', 'body'), documents=document_list)
         logger.info('Created lunr index.')
 
     def search(self, query):
         """Given a query return a list of results."""
         # merge results by perma_filename
-        results = self.idx.search(query)
-        for result in results:
-            result['match_data'] = result['match_data'].metadata
-        return results
+        results = defaultdict(list)
+        lunr_results = self.idx.search(query)
+        for lunr_result in lunr_results:
+            ref = lunr_result['ref']
+            perma_filename = ref.split(':')[0]
+            chunk_id = ref.split(':')[1]
+            lunr_document = self.documents[ref]
+            lunr_result['doc_chunk'] = lunr_document['body']
+            lunr_result['match_data'] = lunr_result['match_data'].metadata
+            results[perma_filename].append(lunr_result)
+        _results = []
 
+        # calculate score and package results
+        for ref, matches in results.items():
+            score = sum([match['score'] for match in matches])
+            _results.append({
+                'ref': ref,
+                'matches': matches,
+                'permalink': f'{WIKI_HOST}/#{ref}',
+                'score': score
+            })
+
+        # sort by score
+        _results = sorted(_results, key=lambda x: x['score'], reverse=True)
+        return _results
